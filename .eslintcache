[{"/home/navendu/Documents/bigradar-assets/flowchart-maker/src/index.js":"1","/home/navendu/Documents/bigradar-assets/flowchart-maker/src/App.js":"2","/home/navendu/Documents/bigradar-assets/flowchart-maker/src/initials.js":"3","/home/navendu/Documents/bigradar-assets/flowchart-maker/src/components/Pop.js":"4"},{"size":449,"mtime":1609140931540,"results":"5","hashOfConfig":"6"},{"size":7811,"mtime":1609321622724,"results":"7","hashOfConfig":"6"},{"size":61,"mtime":1609236097436,"results":"8","hashOfConfig":"6"},{"size":2465,"mtime":1609320915497,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"10thhoe",{"filePath":"13","messages":"14","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/home/navendu/Documents/bigradar-assets/flowchart-maker/src/index.js",[],["21","22"],"/home/navendu/Documents/bigradar-assets/flowchart-maker/src/App.js",["23","24","25","26","27","28","29"],"import React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport { Layout, Menu, Button } from \"antd\";\nimport Custom, { CForm } from \"./components/Pop\";\n\nimport ReactFlow, {\n    removeElements,\n    addEdge,\n    Background,\n    Controls,\n    ReactFlowProvider,\n} from \"react-flow-renderer\";\nimport initials from \"./initials\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport { Content } from \"antd/lib/layout/layout\";\nconst nodeTypes = {\n    selectorNode: Custom,\n};\n\nexport default () => {\n    const [elements, setElements] = useState(initials);\n    const [value, setvalue] = useState(\"\");\n    const [data, setdata] = useState({});\n    const reactFlowWrapper = useRef(null);\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\n    const [collapse, setCollapse] = useState(false);\n    const [id, setid] = useState(0);\n    const [sel, setsel] = useState();\n    useEffect(() => {\n        setElements((els) =>\n            els.map((el) => {\n                if (el.id === sel) {\n                    // it's important that you create a new object here\n                    // in order to notify react flow about the change\n                    el.data = {\n                        ...el.data,\n                        label: value,\n                    };\n                }\n                return el;\n            })\n        );\n    }, [value, setElements]);\n    const onElementClick = (event, element) => setsel(element.id);\n    const getId = () => {\n        const nId = id + 1;\n        setid(nId);\n        return `node_${id}`;\n    };\n    const onLoad = (_reactFlowInstance) =>\n        setReactFlowInstance(_reactFlowInstance);\n\n    const onConnect = (params) => {\n        const { source, target } = { ...params };\n        console.log(\"params\", params);\n        const nD = { ...data };\n        if (nD[source]) {\n            console.log(\"hey\", nD[source]);\n            nD[source] = [...nD[source], target];\n        } else {\n            nD[source] = [target];\n        }\n        setdata(nD);\n        console.log(\"data transfer\", data, elements);\n\n        setElements((els) => addEdge(params, els));\n    };\n    const onDragStart = (event, nodeType) => {\n        event.dataTransfer.setData(\"application/reactflow\", nodeType);\n        event.dataTransfer.effectAllowed = \"move\";\n    };\n    const onElementsRemove = useCallback(\n        (elementsToRemove) =>\n            setElements((els) => removeElements(elementsToRemove, els)),\n        []\n    );\n    const { Header, Content, Footer, Sider } = Layout;\n    const onDragOver = (event) => {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = \"move\";\n    };\n    const onChange = (id, question) => {\n        setElements((els) =>\n            els.map((e) => {\n                if (e.id !== id) {\n                    return e;\n                }\n                return { ...e, data: { ...e.data, question } };\n            })\n        );\n        console.log(elements);\n    };\n    const onDrop = (event) => {\n        event.preventDefault();\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n        const type = event.dataTransfer.getData(\"application/reactflow\");\n        const position = reactFlowInstance.project({\n            x: event.clientX - reactFlowBounds.left,\n            y: event.clientY - reactFlowBounds.top,\n        });\n        console.log(type);\n        const id = getId();\n        const newNode =\n            type === \"selectorNode\"\n                ? {\n                      id: id,\n                      type,\n                      position,\n                      data: {\n                          label: `Question Node`,\n                          question: \"select question of your type?\",\n                          onChange: onChange,\n                      },\n                      sourcePosition: \"right\",\n                  }\n                : type === \"input\"\n                ? {\n                      id: id,\n                      type,\n                      position,\n                      data: { label: `${type} node` },\n                      sourcePosition: \"right\",\n                  }\n                : {\n                      id: id,\n                      type,\n                      position,\n                      data: { label: `${type} node` },\n                      targetPosition: \"left\",\n                      onConnect: (params) => console.log(params),\n                  };\n        console.log(newNode);\n        setElements((es) => es.concat(newNode));\n    };\n    return (\n        <Layout style={{ minHeight: \"100vh\" }}>\n            <ReactFlowProvider>\n                <Sider\n                    collapsible\n                    collapsed={collapse}\n                    onCollapse={() => setCollapse(!collapse)}\n                >\n                    <Menu theme=\"dark\" mode=\"inline\">\n                        <Menu.Item\n                            draggable\n                            onDragStart={(event) => onDragStart(event, \"input\")}\n                        >\n                            Input\n                        </Menu.Item>\n                        <Menu.Item\n                            draggable\n                            onDragStart={(event) =>\n                                onDragStart(event, \"output\")\n                            }\n                        >\n                            output\n                        </Menu.Item>\n                        <Menu.Item\n                            draggable\n                            onDragStart={(event) =>\n                                onDragStart(event, \"default\")\n                            }\n                        >\n                            default\n                        </Menu.Item>\n                        <Menu.Item\n                            draggable\n                            onDragStart={(event) =>\n                                onDragStart(event, \"selectorNode\")\n                            }\n                        >\n                            custom\n                        </Menu.Item>\n                        <Menu.SubMenu title=\"Tools\">\n                            <Menu.Item>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={() => console.log(elements)}\n                                >\n                                    Save\n                                </Button>\n                            </Menu.Item>\n                            <Menu.Item>\n                                <CForm handler={(v) => setvalue(v.question)} />\n                            </Menu.Item>\n                        </Menu.SubMenu>\n                    </Menu>\n                </Sider>\n\n                <Layout>\n                    <Content>\n                        <div style={{ height: \"100vh\" }} ref={reactFlowWrapper}>\n                            <ReactFlow\n                                onElementClick={onElementClick}\n                                elements={elements}\n                                onElementsRemove={onElementsRemove}\n                                onConnect={onConnect}\n                                deleteKeyCode={46} /* 'delete'-key */\n                                nodeTypes={nodeTypes}\n                                onDrop={onDrop}\n                                onDragOver={onDragOver}\n                                // style={{ background: \"#212345\" }}\n                                onLoad={onLoad}\n                            >\n                                <Controls />\n                                {/* <Background variant=\"lines\" gap={20} size={2} /> */}\n                            </ReactFlow>\n                        </div>\n                    </Content>\n                </Layout>\n            </ReactFlowProvider>\n        </Layout>\n    );\n};\n","/home/navendu/Documents/bigradar-assets/flowchart-maker/src/initials.js",[],"/home/navendu/Documents/bigradar-assets/flowchart-maker/src/components/Pop.js",["30","31"],"import React, { memo, useState } from \"react\";\nimport { Popover, Button, Input, Form, InputNumber } from \"antd\";\nimport { Handle } from \"react-flow-renderer\";\nexport default memo(({ data, id }) => {\n    const [visible, setVisible] = useState(false);\n    const [question, setQuestion] = useState(data.question);\n\n    const hide = () => {\n        setVisible(false);\n    };\n    const updateFields = (value) => {\n        if (value.question) {\n            setQuestion(value.question);\n        }\n        setVisible(false);\n        data.onChange(id, value.question);\n    };\n    const handleVisibleChange = (visible) => {\n        setVisible(visible);\n    };\n\n    return (\n        <>\n            <Handle\n                type=\"target\"\n                position=\"left\"\n                style={{ background: \"#555\" }}\n            />\n            <Handle\n                type=\"source\"\n                position=\"right\"\n                style={{ background: \"#555\" }}\n            />\n\n            <Button size=\"large\">\n                <div>\n                    <div>{question}</div>\n                    <Popover\n                        content={<CForm handler={updateFields} />}\n                        trigger=\"click\"\n                        visible={visible}\n                        onVisibleChange={handleVisibleChange}\n                    >\n                        <Button size=\"small\">+</Button>\n                    </Popover>\n                </div>\n            </Button>\n            {/* <input\n                className=\"nodrag\"\n                type=\"color\"\n                onChange={data.onChange}\n                defaultValue={data.color}\n            /> */}\n        </>\n    );\n});\n\nexport const CForm = (props) => {\n    const onFinish = (values) => {\n        console.log(values);\n        props.handler(values);\n    };\n    return (\n        <Form\n            // {...layout}\n            name=\"basic\"\n            // initialValues={{ remember: true }}\n            onFinish={onFinish}\n            // onFinishFailed={onFinishFailed}\n        >\n            <Form.Item\n                style={{ margin: 5 }}\n                label=\"Question\"\n                name=\"question\"\n                rules={[{ message: \"Please input Question\" }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n};\n",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":8,"column":5,"nodeType":"38","messageId":"39","endLine":8,"endColumn":15},{"ruleId":"36","severity":1,"message":"40","line":13,"column":8,"nodeType":"38","messageId":"39","endLine":13,"endColumn":13},{"ruleId":"36","severity":1,"message":"41","line":14,"column":10,"nodeType":"38","messageId":"39","endLine":14,"endColumn":17},{"ruleId":"42","severity":1,"message":"43","line":19,"column":1,"nodeType":"44","endLine":213,"endColumn":3},{"ruleId":"45","severity":1,"message":"46","line":42,"column":8,"nodeType":"47","endLine":42,"endColumn":28,"suggestions":"48"},{"ruleId":"36","severity":1,"message":"49","line":76,"column":13,"nodeType":"38","messageId":"39","endLine":76,"endColumn":19},{"ruleId":"36","severity":1,"message":"50","line":76,"column":30,"nodeType":"38","messageId":"39","endLine":76,"endColumn":36},{"ruleId":"36","severity":1,"message":"51","line":2,"column":40,"nodeType":"38","messageId":"39","endLine":2,"endColumn":51},{"ruleId":"36","severity":1,"message":"52","line":8,"column":11,"nodeType":"38","messageId":"39","endLine":8,"endColumn":15},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'Background' is defined but never used.","Identifier","unusedVar","'Sider' is defined but never used.","'Content' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sel'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setElements' needs the current value of 'sel'.","ArrayExpression",["55"],"'Header' is assigned a value but never used.","'Footer' is assigned a value but never used.","'InputNumber' is defined but never used.","'hide' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [value, setElements, sel]",{"range":"58","text":"59"},[1356,1376],"[value, setElements, sel]"]